"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import json

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

try:
    with open(os.path.join(BASE_DIR, "config.json")) as config_file:
        config = json.load(config_file)
except IOError:
    config = {}


def get_var(name, default_value=None):
    """
    The function first searches for a environmental variable called by the
    name. Then, if not found, it searches for the value from config.json file.
    If the variable is not found on either place, then it returns default_value.
    """
    return os.environ.get(name, config.get(name, default_value))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_var("SECRET_KEY", "development_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(get_var("DEBUG", 1)))

ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = get_var("ALLOWED_HOSTS")
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(","))

CSRF_TRUSTED_ORIGINS = []
TRUSTED_ORIGINS_ENV = get_var("TRUSTED_ORIGINS")
if TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS.extend(TRUSTED_ORIGINS_ENV.split(","))

# Application definition

INSTALLED_APPS = [
    "cms.apps.CmsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    "django_filters",
    'django_userforeignkey',
    'import_export' ,
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.orcid',
    'django_select2',
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "crum.CurrentRequestUserMiddleware",
]

ROOT_URLCONF = "config.urls"
LOGIN_REDIRECT_URL = '/'


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# ORCID Allauth Settings
# https://django-allauth.readthedocs.io/en/latest/installation.html

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'orcid': {
        'BASE_DOMAIN': 'orcid.org',
        'MEMBER_API': False,
        'APP': {
            'client_id': get_var("ORCID_CLIENT_ID", ''),
            'secret': get_var("ORCID_SECRET", ''),
            'key': '',
        }
    }
}


WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": get_var("DB_HOST"),
        "NAME": get_var("DB_NAME"),
        "USER": get_var("DB_USER"),
        "PASSWORD": get_var("DB_PASS"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Helsinki"

USE_I18N = True

USE_TZ = True

# Set false for Pythonanywhere and similar non-Docker environments
USE_REDIS = os.getenv("USE_REDIS", "false").lower() == "true"

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'select2': {
        'BACKEND': 'django_redis.cache.RedisCache' if USE_REDIS else 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'redis://redis:6379' if USE_REDIS else '',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        } if USE_REDIS else {},
    }
}

SELECT2_CACHE_BACKEND = "select2"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = get_var("STATIC_ROOT", os.path.join(BASE_DIR, "static"))

# Media files

MEDIA_URL = "media/"
MEDIA_ROOT = get_var("MEDIA_ROOT", os.path.join(BASE_DIR, "media"))

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Email configuration
EMAIL_BACKEND = get_var("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")

# This tells Django to allow iframes only on the same origin (localhost:8000).
X_FRAME_OPTIONS = 'SAMEORIGIN'
